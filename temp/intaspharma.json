{
    /******PLUGIN GENERAL DEFINITION******/
    "name": "event-based-plugin",
    "svgString": "<svg xmlns='http://www.w3.org/2000/svg' width='64' x='0px' y='0px' viewBox='0 0 73.3 75.8' style='enable-background:new 0 0 73.3 75.8;' xml:space='preserve'> <style type='text/css'> .st0{fill:#2684FF;} .st1{fill:url(#SVGID_1_);} .st2{fill:url(#SVGID_2_);} </style> <title>Jira Software-blue</title> <g> <g id='Blue'> <path class='st0' d='M72.4,35.8L39.8,3.2L36.6,0l0,0L12.1,24.5l0,0L0.9,35.8c-1.2,1.2-1.2,3.1,0,4.2l22.4,22.4l13.3,13.3 l24.5-24.5l0.4-0.4L72.4,40C73.6,38.8,73.6,36.9,72.4,35.8z M36.6,49.1L25.4,37.9l11.2-11.2l11.2,11.2L36.6,49.1z'/> <linearGradient id='SVGID_1_' gradientUnits='userSpaceOnUse' x1='34.6324' y1='62.655' x2='18.9924' y2='47.015' gradientTransform='matrix(1 0 0 -1 0 78)'> <stop offset='0.18' style='stop-color:#0052CC'/> <stop offset='1' style='stop-color:#2684FF'/> </linearGradient> <path class='st1' d='M36.6,26.7c-7.3-7.3-7.4-19.2-0.1-26.6L12,24.6l13.3,13.3L36.6,26.7z'/> <linearGradient id='SVGID_2_' gradientUnits='userSpaceOnUse' x1='38.7774' y1='17.72' x2='54.3874' y2='33.33' gradientTransform='matrix(1 0 0 -1 0 78)'> <stop offset='0.18' style='stop-color:#0052CC'/> <stop offset='1' style='stop-color:#2684FF'/> </linearGradient> <path class='st2' d='M47.9,37.8L36.6,49.1c7.4,7.4,7.4,19.3,0,26.7c0,0,0,0,0,0l0,0l24.6-24.6L47.9,37.8z'/> </g> </g> </svg>",
    "details": {
        "title": {
            "en": "Event-based-plugin",
            "es": "Event-based-plugin",
            "pt": "Event-based-plugin"
        },
        "version": "0.8",
        "shortDescription": {
            "en": "",
            "es": "",
            "pt": ""
        },
        "longDescription": {
            "en": "Event-based-plugin",
            "es": "Event-based-plugin",
            "pt": "Event-based-plugin"
        },
        "updated": "2021-12-12",
        "developer": "ITM Platform"
    },
    /******PLUGIN FEATURES DEFINITION******/
    "features": [
        // in this case there is only one feature
        {
            // This feature will trigger when a Task is updated
            "trigger": "event",
            "connector": "event-based-plugin",
            "AccountId": "@@AccountId@@",
            "entity": "Task",
            "description": "every time a task that has a purchase linked to it  is completed, sends an email notifying”",
            "event": "updated",
            "async": true,
            "actions": [ // This array contains all the actions that will be executed for this specific feature
                {
                    "action": "restcall",
                    "url": "https://api.itmplatform.com/mycompanylogin/{{ config.apikey }}",
                    "method": "POST",
                    "description": "Do login with apikey",
                    "output": "logininfo", // This object contains the token needed to make API calls to ITM Platform
                    "payload": "",
                    "dataType": "application/json"
                },
                {
                    // We need to know to which project the task belongs
                    "action": "restcall",
                    "url": "https://api.itmplatform.com/v2/mycompany/projects/{{  input.projectId }}",
                    "method": "GET",
                    "token": "{{ logininfo.Token }}", // Token required to use ITM Platform endpoints
                    "description": "Retrieve project",
                    "output": "project", // This object has all the project info needed for the email
                    "payload": "",
                    "dataType": "application/json"
                    
                },
                {
                    // We have the project info, but we need information about the task that was updated
                    "action": "restcall",
                    // This URL will retrieve all the tasks attached to the project we got from the previous action
                    "url": "https://api.itmplatform.com/v2/mycompany/projects/{{  input.projectId }}/tasks/Search", 
                    "method": "POST",
                    "token": "{{ logininfo.Token }}",
                    "description": "Retrieve task team",
                    // We need to send a payload in order to filter the tasks,
                    // We are only interested on the task that triggered the feature, the one that was updated
                    // Also we specify the columns we want to retrieve
                    "payload": "{\"Filter\":{\"Id\":{\"$in\":[{{ input.task.Id }}]}}, \"Columns\":{\"$in\":[\"Id\", \"ProjectId\",\"Name\", \"Team\",\"Status\"]}}",
                    "output": "taskTeam",
                    "dataType": "application/json"
                },
                // At this point we have the project and the task info.
                // Now its time to loop through each team member and send an email
                {
                    "action": "loop",
                    "loop": {
                        "var": "taskTeam.list.First.Team.TeamMembers", //We need the array with all the members
                        "output": "singleMember",
                        // This conditions checks if the task is completed (3 = "Completed")
                        "condition": "{{taskTeam.list.0.Status.Type.Id}} == 3"
                    },
                    // If the condition is true, we execute the actions
                    "actions": [
                        {
                            "action": "restcall",
                            "url": "http://tools.itmplatform.com:8081/logAny",
                            "method": "POST",
                            "description": "team members",
                            "output": "test",
                            "payload": "{ \"TeamMember\": \" {{ singleMember.DisplayName }} \" , \"taskId\": {{ input.task.Id }} , \"taskName\": \" {{ input.task.Name }} \" , \"projectId\":  {{  input.projectId }} , \"statusss\": \" {{ taskTeam.list.[0].Status.Type.Id }} \" }",
                            "dataType": "application/json"
                        }
                    ]
                }
            ]
        }
    ],

    /******PLUGIN CONFIGURATION DEFINITION******/
    "config": [

        // This will display a checkbox to activate the plugin
        {
            "name": "isactive",
            "label": {
                "en": "Activate connector",
                "es": "Activar conector",
                "pt": "Ativar o conector"
            },
            "tooltip": {
                "en": "When selected, the connector will be active and will start synchronizing data",
                "es": "Cuando esté seleccionado, el conector estará activo y comenzará a sincronizar datos",
                "pt": "Quando selecionado, o conector estará ativo e começará a sincronizar dados"
            },
            "type": "checkbox",
            "required": false
        },
        //Input type text to introduce the API key associated to the account
        {
            "name": "apikey",
            "label": {
                "en": "API Key",
                "es": "API Key",
                "pt": "API Key"
            },
            "tooltip": {
                "en": "API Key",
                "es": "API Key",
                "pt": "API Key"
            },
            "type": "string",
            "required": true
        }
    ],

    // This will enable the plugin only to specific companies 
    "accountId": [
        4019 // Array of numbers, add more account ids in orden to enable the plugin for them
    ]
}
